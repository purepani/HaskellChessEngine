{
  pkgs = hackage:
    {
      packages = {
        "pretty".revision = (((hackage."pretty")."1.1.3.6").revisions).default;
        "unordered-containers".revision = (((hackage."unordered-containers")."0.2.19.1").revisions).default;
        "vector-binary-instances".revision = (((hackage."vector-binary-instances")."0.2.5.2").revisions).default;
        "integer-logarithms".revision = (((hackage."integer-logarithms")."1.0.3.1").revisions).default;
        "adjunctions".revision = (((hackage."adjunctions")."4.4.2").revisions).default;
        "text".revision = (((hackage."text")."1.2.5.0").revisions).default;
        "vector-instances".revision = (((hackage."vector-instances")."3.4").revisions).default;
        "array".revision = (((hackage."array")."0.5.4.0").revisions).default;
        "invariant".revision = (((hackage."invariant")."0.6").revisions).default;
        "parallel".revision = (((hackage."parallel")."3.2.2.0").revisions).default;
        "parser-combinators".revision = (((hackage."parser-combinators")."1.3.0").revisions).default;
        "MonadRandom".revision = (((hackage."MonadRandom")."0.5.3").revisions).default;
        "vector".revision = (((hackage."vector")."0.13.0.0").revisions).default;
        "lens".revision = (((hackage."lens")."5.2").revisions).default;
        "pointed".revision = (((hackage."pointed")."5.0.4").revisions).default;
        "comonad".revision = (((hackage."comonad")."5.0.8").revisions).default;
        "profunctors".revision = (((hackage."profunctors")."5.6.2").revisions).default;
        "extra".revision = (((hackage."extra")."1.7.12").revisions).default;
        "bitvec".revision = (((hackage."bitvec")."1.1.3.0").revisions).default;
        "contravariant".revision = (((hackage."contravariant")."1.5.5").revisions).default;
        "th-lift-instances".revision = (((hackage."th-lift-instances")."0.1.20").revisions).default;
        "assoc".revision = (((hackage."assoc")."1.0.2").revisions).default;
        "mtl".revision = (((hackage."mtl")."2.2.2").revisions).default;
        "OneTuple".revision = (((hackage."OneTuple")."0.3.1").revisions).default;
        "bytestring".revision = (((hackage."bytestring")."0.11.3.1").revisions).default;
        "reflection".revision = (((hackage."reflection")."2.1.6").revisions).default;
        "strict".revision = (((hackage."strict")."0.4.0.1").revisions).default;
        "tagged".revision = (((hackage."tagged")."0.8.6.1").revisions).default;
        "splitmix".revision = (((hackage."splitmix")."0.1.0.4").revisions).default;
        "file-embed".revision = (((hackage."file-embed")."0.0.15.0").revisions).default;
        "attoparsec".revision = (((hackage."attoparsec")."0.14.4").revisions).default;
        "th-compat".revision = (((hackage."th-compat")."0.1.4").revisions).default;
        "filepath".revision = (((hackage."filepath")."1.4.2.2").revisions).default;
        "th-lift".revision = (((hackage."th-lift")."0.8.2").revisions).default;
        "stm".revision = (((hackage."stm")."2.5.0.2").revisions).default;
        "void".revision = (((hackage."void")."0.7.3").revisions).default;
        "semigroups".revision = (((hackage."semigroups")."0.20").revisions).default;
        "free".revision = (((hackage."free")."5.1.9").revisions).default;
        "chessIO".revision = (((hackage."chessIO")."0.9.3.0").revisions).default;
        "case-insensitive".revision = (((hackage."case-insensitive")."1.2.1.0").revisions).default;
        "call-stack".revision = (((hackage."call-stack")."0.4.0").revisions).default;
        "ghc-prim".revision = (((hackage."ghc-prim")."0.8.0").revisions).default;
        "vector-stream".revision = (((hackage."vector-stream")."0.1.0.0").revisions).default;
        "ghc-boot-th".revision = (((hackage."ghc-boot-th")."9.2.4").revisions).default;
        "indexed-traversable".revision = (((hackage."indexed-traversable")."0.1.2").revisions).default;
        "distributive".revision = (((hackage."distributive")."0.6.2.1").revisions).default;
        "bifunctors".revision = (((hackage."bifunctors")."5.5.13").revisions).default;
        "kan-extensions".revision = (((hackage."kan-extensions")."5.2.5").revisions).default;
        "base".revision = (((hackage."base")."4.16.3.0").revisions).default;
        "time".revision = (((hackage."time")."1.11.1.1").revisions).default;
        "random".revision = (((hackage."random")."1.2.1.1").revisions).default;
        "process".revision = (((hackage."process")."1.6.13.2").revisions).default;
        "megaparsec".revision = (((hackage."megaparsec")."9.2.2").revisions).default;
        "transformers-base".revision = (((hackage."transformers-base")."0.4.6").revisions).default;
        "data-default-class".revision = (((hackage."data-default-class")."0.1.2.0").revisions).default;
        "vector-algorithms".revision = (((hackage."vector-algorithms")."0.9.0.1").revisions).default;
        "th-abstraction".revision = (((hackage."th-abstraction")."0.4.5.0").revisions).default;
        "semigroupoids".revision = (((hackage."semigroupoids")."5.3.7").revisions).default;
        "keys".revision = (((hackage."keys")."3.12.3").revisions).default;
        "these".revision = (((hackage."these")."1.1.1.1").revisions).default;
        "split".revision = (((hackage."split")."0.2.3.5").revisions).default;
        "base-orphans".revision = (((hackage."base-orphans")."0.8.7").revisions).default;
        "ghc-bignum".revision = (((hackage."ghc-bignum")."1.2").revisions).default;
        "primitive".revision = (((hackage."primitive")."0.7.4.0").revisions).default;
        "directory".revision = (((hackage."directory")."1.3.6.2").revisions).default;
        "exceptions".revision = (((hackage."exceptions")."0.10.4").revisions).default;
        "o-clock".revision = (((hackage."o-clock")."1.2.1.1").revisions).default;
        "clock".revision = (((hackage."clock")."0.8.3").revisions).default;
        "prettyprinter".revision = (((hackage."prettyprinter")."1.7.1").revisions).default;
        "rts".revision = (((hackage."rts")."1.0.2").revisions).default;
        "transformers".revision = (((hackage."transformers")."0.5.6.2").revisions).default;
        "template-haskell".revision = (((hackage."template-haskell")."2.18.0.0").revisions).default;
        "mono-traversable".revision = (((hackage."mono-traversable")."1.0.15.3").revisions).default;
        "deepseq".revision = (((hackage."deepseq")."1.4.6.1").revisions).default;
        "unix".revision = (((hackage."unix")."2.7.2.2").revisions).default;
        "hashable".revision = (((hackage."hashable")."1.4.1.0").revisions).default;
        "transformers-compat".revision = (((hackage."transformers-compat")."0.7.2").revisions).default;
        "indexed-traversable-instances".revision = (((hackage."indexed-traversable-instances")."0.1.1.1").revisions).default;
        "scientific".revision = (((hackage."scientific")."0.3.7.0").revisions).default;
        "binary".revision = (((hackage."binary")."0.8.9.0").revisions).default;
        "containers".revision = (((hackage."containers")."0.6.5.1").revisions).default;
        "StateVar".revision = (((hackage."StateVar")."1.2.2").revisions).default;
        };
      compiler = {
        version = "9.2.4";
        nix-name = "ghc924";
        packages = {
          "pretty" = "1.1.3.6";
          "unordered-containers" = "0.2.19.1";
          "vector-binary-instances" = "0.2.5.2";
          "integer-logarithms" = "1.0.3.1";
          "adjunctions" = "4.4.2";
          "text" = "1.2.5.0";
          "vector-instances" = "3.4";
          "array" = "0.5.4.0";
          "invariant" = "0.6";
          "parallel" = "3.2.2.0";
          "parser-combinators" = "1.3.0";
          "MonadRandom" = "0.5.3";
          "vector" = "0.13.0.0";
          "lens" = "5.2";
          "pointed" = "5.0.4";
          "comonad" = "5.0.8";
          "profunctors" = "5.6.2";
          "extra" = "1.7.12";
          "bitvec" = "1.1.3.0";
          "contravariant" = "1.5.5";
          "th-lift-instances" = "0.1.20";
          "assoc" = "1.0.2";
          "mtl" = "2.2.2";
          "OneTuple" = "0.3.1";
          "bytestring" = "0.11.3.1";
          "reflection" = "2.1.6";
          "strict" = "0.4.0.1";
          "tagged" = "0.8.6.1";
          "splitmix" = "0.1.0.4";
          "file-embed" = "0.0.15.0";
          "attoparsec" = "0.14.4";
          "th-compat" = "0.1.4";
          "filepath" = "1.4.2.2";
          "th-lift" = "0.8.2";
          "stm" = "2.5.0.2";
          "void" = "0.7.3";
          "semigroups" = "0.20";
          "free" = "5.1.9";
          "chessIO" = "0.9.3.0";
          "case-insensitive" = "1.2.1.0";
          "call-stack" = "0.4.0";
          "ghc-prim" = "0.8.0";
          "vector-stream" = "0.1.0.0";
          "ghc-boot-th" = "9.2.4";
          "indexed-traversable" = "0.1.2";
          "distributive" = "0.6.2.1";
          "bifunctors" = "5.5.13";
          "kan-extensions" = "5.2.5";
          "base" = "4.16.3.0";
          "time" = "1.11.1.1";
          "random" = "1.2.1.1";
          "process" = "1.6.13.2";
          "megaparsec" = "9.2.2";
          "transformers-base" = "0.4.6";
          "data-default-class" = "0.1.2.0";
          "vector-algorithms" = "0.9.0.1";
          "th-abstraction" = "0.4.5.0";
          "semigroupoids" = "5.3.7";
          "keys" = "3.12.3";
          "these" = "1.1.1.1";
          "split" = "0.2.3.5";
          "base-orphans" = "0.8.7";
          "ghc-bignum" = "1.2";
          "primitive" = "0.7.4.0";
          "directory" = "1.3.6.2";
          "exceptions" = "0.10.4";
          "o-clock" = "1.2.1.1";
          "clock" = "0.8.3";
          "prettyprinter" = "1.7.1";
          "rts" = "1.0.2";
          "transformers" = "0.5.6.2";
          "template-haskell" = "2.18.0.0";
          "mono-traversable" = "1.0.15.3";
          "deepseq" = "1.4.6.1";
          "unix" = "2.7.2.2";
          "hashable" = "1.4.1.0";
          "transformers-compat" = "0.7.2";
          "indexed-traversable-instances" = "0.1.1.1";
          "scientific" = "0.3.7.0";
          "binary" = "0.8.9.0";
          "containers" = "0.6.5.1";
          "StateVar" = "1.2.2";
          };
        };
      };
  extras = hackage:
    { packages = { ChessEngine = ./.plan.nix/ChessEngine.nix; }; };
  modules = [
    ({ lib, ... }:
      { packages = { "ChessEngine" = { flags = {}; }; }; })
    ({ lib, ... }:
      {
        packages = {
          "invariant".components.library.planned = lib.mkOverride 900 true;
          "transformers-base".components.library.planned = lib.mkOverride 900 true;
          "base-orphans".components.library.planned = lib.mkOverride 900 true;
          "o-clock".components.library.planned = lib.mkOverride 900 true;
          "megaparsec".components.library.planned = lib.mkOverride 900 true;
          "these".components.library.planned = lib.mkOverride 900 true;
          "vector-instances".components.library.planned = lib.mkOverride 900 true;
          "extra".components.library.planned = lib.mkOverride 900 true;
          "filepath".components.library.planned = lib.mkOverride 900 true;
          "distributive".components.library.planned = lib.mkOverride 900 true;
          "pretty".components.library.planned = lib.mkOverride 900 true;
          "reflection".components.library.planned = lib.mkOverride 900 true;
          "bytestring".components.library.planned = lib.mkOverride 900 true;
          "mono-traversable".components.library.planned = lib.mkOverride 900 true;
          "strict".components.library.planned = lib.mkOverride 900 true;
          "comonad".components.library.planned = lib.mkOverride 900 true;
          "profunctors".components.library.planned = lib.mkOverride 900 true;
          "exceptions".components.library.planned = lib.mkOverride 900 true;
          "call-stack".components.library.planned = lib.mkOverride 900 true;
          "chessIO".components.library.planned = lib.mkOverride 900 true;
          "ghc-prim".components.library.planned = lib.mkOverride 900 true;
          "array".components.library.planned = lib.mkOverride 900 true;
          "keys".components.library.planned = lib.mkOverride 900 true;
          "binary".components.library.planned = lib.mkOverride 900 true;
          "ghc-boot-th".components.library.planned = lib.mkOverride 900 true;
          "scientific".components.library.planned = lib.mkOverride 900 true;
          "splitmix".components.library.planned = lib.mkOverride 900 true;
          "rts".components.library.planned = lib.mkOverride 900 true;
          "tagged".components.library.planned = lib.mkOverride 900 true;
          "unix".components.library.planned = lib.mkOverride 900 true;
          "file-embed".components.library.planned = lib.mkOverride 900 true;
          "parser-combinators".components.library.planned = lib.mkOverride 900 true;
          "vector".components.library.planned = lib.mkOverride 900 true;
          "indexed-traversable-instances".components.library.planned = lib.mkOverride 900 true;
          "data-default-class".components.library.planned = lib.mkOverride 900 true;
          "adjunctions".components.library.planned = lib.mkOverride 900 true;
          "vector-binary-instances".components.library.planned = lib.mkOverride 900 true;
          "parallel".components.library.planned = lib.mkOverride 900 true;
          "directory".components.library.planned = lib.mkOverride 900 true;
          "time".components.library.planned = lib.mkOverride 900 true;
          "MonadRandom".components.library.planned = lib.mkOverride 900 true;
          "StateVar".components.library.planned = lib.mkOverride 900 true;
          "case-insensitive".components.library.planned = lib.mkOverride 900 true;
          "free".components.library.planned = lib.mkOverride 900 true;
          "vector-algorithms".components.library.planned = lib.mkOverride 900 true;
          "bitvec".components.library.planned = lib.mkOverride 900 true;
          "ghc-bignum".components.library.planned = lib.mkOverride 900 true;
          "indexed-traversable".components.library.planned = lib.mkOverride 900 true;
          "split".components.library.planned = lib.mkOverride 900 true;
          "contravariant".components.library.planned = lib.mkOverride 900 true;
          "assoc".components.library.planned = lib.mkOverride 900 true;
          "process".components.library.planned = lib.mkOverride 900 true;
          "prettyprinter".components.library.planned = lib.mkOverride 900 true;
          "clock".components.library.planned = lib.mkOverride 900 true;
          "template-haskell".components.library.planned = lib.mkOverride 900 true;
          "th-lift".components.library.planned = lib.mkOverride 900 true;
          "stm".components.library.planned = lib.mkOverride 900 true;
          "pointed".components.library.planned = lib.mkOverride 900 true;
          "th-compat".components.library.planned = lib.mkOverride 900 true;
          "lens".components.library.planned = lib.mkOverride 900 true;
          "semigroupoids".components.library.planned = lib.mkOverride 900 true;
          "attoparsec".components.library.planned = lib.mkOverride 900 true;
          "mtl".components.library.planned = lib.mkOverride 900 true;
          "th-abstraction".components.library.planned = lib.mkOverride 900 true;
          "transformers".components.library.planned = lib.mkOverride 900 true;
          "OneTuple".components.library.planned = lib.mkOverride 900 true;
          "th-lift-instances".components.library.planned = lib.mkOverride 900 true;
          "deepseq".components.library.planned = lib.mkOverride 900 true;
          "primitive".components.library.planned = lib.mkOverride 900 true;
          "text".components.library.planned = lib.mkOverride 900 true;
          "bifunctors".components.library.planned = lib.mkOverride 900 true;
          "unordered-containers".components.library.planned = lib.mkOverride 900 true;
          "random".components.library.planned = lib.mkOverride 900 true;
          "base".components.library.planned = lib.mkOverride 900 true;
          "vector-stream".components.library.planned = lib.mkOverride 900 true;
          "kan-extensions".components.library.planned = lib.mkOverride 900 true;
          "integer-logarithms".components.library.planned = lib.mkOverride 900 true;
          "transformers-compat".components.library.planned = lib.mkOverride 900 true;
          "containers".components.library.planned = lib.mkOverride 900 true;
          "hashable".components.library.planned = lib.mkOverride 900 true;
          "semigroups".components.library.planned = lib.mkOverride 900 true;
          "ChessEngine".components.exes."ChessEngine".planned = lib.mkOverride 900 true;
          "void".components.library.planned = lib.mkOverride 900 true;
          };
        })
    ];
  }